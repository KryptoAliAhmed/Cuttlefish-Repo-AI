// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/Counters.sol";

contract TributaryDAOReit is ERC721, Ownable {
    using Counters for Counters.Counter;
    Counters.Counter private _tokenIds;

    mapping(uint256 => uint256) public nftVotingPower; // Voting power per NFT
    mapping(address => uint256) public votes; // Total votes per address
    uint256 public totalVotes;

    event NFTMinted(uint256 tokenId, address owner);
    event VoteCast(address voter, uint256 proposalId, uint256 votes);

    constructor() ERC721("TributaryGoldenNFT", "TGNF") Ownable(msg.sender) {}

    function mintGoldenNFT(address to) public onlyOwner returns (uint256) {
        _tokenIds.increment();
        uint256 newItemId = _tokenIds.current();
        _safeMint(to, newItemId);
        nftVotingPower[newItemId] = 150; // 1.5x voting power for Golden NFTs
        votes[to] += 150;
        totalVotes += 150;
        emit NFTMinted(newItemId, to);
        return newItemId;
    }

    function castVote(uint256 proposalId, uint256 voteAmount) public {
        require(voteAmount <= votes[msg.sender], "Insufficient voting power");
        votes[msg.sender] -= voteAmount;
        totalVotes -= voteAmount;
        emit VoteCast(msg.sender, proposalId, voteAmount);
    }

    function getVotes(address voter) public view returns (uint256) {
        return votes[voter];
    }
}